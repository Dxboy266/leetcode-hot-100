package com.leetcode.array;

import java.util.HashMap;
import java.util.Map;

/**
 * 1. 两数之和
 * 
 * 题目链接：https://leetcode.cn/problems/two-sum/
 * 难度：简单
 * 标签：数组、哈希表
 * 
 * ==================== 题目描述 ====================
 * 给定一个整数数组 nums 和一个整数目标值 target，请你在该数组中找出
 * 和为目标值 target 的那两个整数，并返回它们的数组下标。
 * 
 * 你可以假设每种输入只会对应一个答案。但是，数组中同一个元素在答案里不能重复出现。
 * 你可以按任意顺序返回答案。
 * 
 * 示例 1：
 * 输入：nums = [2,7,11,15], target = 9
 * 输出：[0,1]
 * 解释：因为 nums[0] + nums[1] == 9，返回 [0, 1]。
 * 
 * 示例 2：
 * 输入：nums = [3,2,4], target = 6
 * 输出：[1,2]
 * 
 * 提示：
 * - 2 <= nums.length <= 10^4
 * - -10^9 <= nums[i] <= 10^9
 * - -10^9 <= target <= 10^9
 * - 只会存在一个有效答案
 * 
 * ==================== 解题思路 ====================
 * 
 * 方法一：暴力解法
 * - 使用两层循环遍历数组的所有元素组合
 * - 外层循环索引 i，内层循环索引 j (从 i+1 开始)
 * - 如果 nums[i] + nums[j] == target，返回 [i, j]
 * - 时间复杂度：O(n²)，空间复杂度：O(1)
 * - 优点：简单直接，不需要额外空间
 * - 缺点：效率低，不适合大数据量
 * 
 * 方法二：哈希表（推荐）★★★
 * - 使用HashMap存储已遍历的元素值和索引的映射
 * - 遍历数组，对于每个元素 nums[i]：
 *   1. 计算 complement = target - nums[i]
 *   2. 如果 complement 在HashMap中，说明找到答案
 *   3. 否则，将 nums[i] 和索引 i 存入HashMap
 * - 时间复杂度：O(n)，空间复杂度：O(n)
 * - 优点：只需一次遍历，效率高
 * - 缺点：需要额外的HashMap空间
 * 
 * ==================== 知识点总结 ====================
 * 
 * 1. 哈希表的应用场景：
 *    - 需要快速查找某个元素是否存在
 *    - 需要记录元素的位置信息
 *    - 空间换时间的经典应用
 * 
 * 2. 算法优化思路：
 *    - 从暴力解法 O(n²) 优化到 O(n)
 *    - 通过HashMap将查找时间从 O(n) 降到 O(1)
 * 
 * 3. 易错点：
 *    - 注意不能使用同一个元素两次
 *    - 返回的是索引而不是元素值
 *    - HashMap的key是元素值，value是索引
 * 
 * 4. 相关题目：
 *    - 15. 三数之和（进阶）
 *    - 18. 四数之和（进阶）
 *    - 167. 两数之和 II - 输入有序数组（双指针）
 * 
 * @Author Dxboy266
 * @Date 2025-10-12
 */
public class TwoSum {
    
    /**
     * 方法一：暴力解法
     * 时间复杂度：O(n²) - 两层嵌套循环
     * 空间复杂度：O(1) - 只使用常数空间
     * 
     * 思路：遍历所有可能的两个数的组合
     */
    public int[] twoSumBruteForce(int[] nums, int target) {
        // 外层循环：第一个数
        for (int i = 0; i < nums.length; i++) {
            // 内层循环：第二个数（从 i+1 开始，避免重复使用同一元素）
            for (int j = i + 1; j < nums.length; j++) {
                // 如果两数之和等于目标值，返回索引
                if (nums[i] + nums[j] == target) {
                    return new int[]{i, j};
                }
            }
        }
        // 题目保证有解，这里返回空数组只是为了编译通过
        return new int[0];
    }
    
    /**
     * 方法二：哈希表（推荐）★★★
     * 时间复杂度：O(n) - 只需遍历一次数组
     * 空间复杂度：O(n) - 最坏情况下HashMap存储 n-1 个元素
     * 
     * 思路：
     * 1. 用HashMap存储 {元素值: 索引} 的映射
     * 2. 遍历数组时，查找 target - 当前值 是否在HashMap中
     * 3. 如果存在，说明找到答案；否则将当前值加入HashMap
     */
    public int[] twoSum(int[] nums, int target) {
        // 创建HashMap：key是元素值，value是索引
        Map<Integer, Integer> map = new HashMap<>();
        
        // 遍历数组
        for (int i = 0; i < nums.length; i++) {
            // 计算需要找的另一个数
            int complement = target - nums[i];
            
            // 如果complement在HashMap中，说明找到了答案
            if (map.containsKey(complement)) {
                // 返回两个索引：之前的索引和当前索引
                return new int[]{map.get(complement), i};
            }
            
            // 将当前元素及其索引存入HashMap
            // 注意：这里是将当前元素存入，而不是complement
            map.put(nums[i], i);
        }
        
        // 题目保证有解，这里返回空数组只是为了编译通过
        return new int[0];
    }
    
    /**
     * 补充说明：为什么哈希表方法更优？
     * 
     * 1. 查找效率对比：
     *    - 暴力法：对于每个元素，需要 O(n) 时间查找配对元素
     *    - 哈希表：HashMap的查找时间是 O(1)
     * 
     * 2. 实际应用：
     *    - 当数组很大时（如10^4个元素），暴力法需要10^8次操作
     *    - 哈希表只需要10^4次操作，性能差异巨大
     * 
     * 3. 空间与时间的权衡：
     *    - 哈希表用额外的 O(n) 空间换取了时间上的大幅优化
     *    - 这是算法优化中常见的"空间换时间"策略
     * 
     * 4. 面试建议：
     *    - 可以先说暴力解法，展示思路清晰
     *    - 然后提出优化方案（哈希表），展示算法优化能力
     *    - 最后分析两种方法的时间空间复杂度，展示分析能力
     */
}

