package com.leetcode.linkedlist;

import com.leetcode.utils.ListNode;

/**
 * 141. 环形链表
 * 
 * 题目链接：https://leetcode.cn/problems/linked-list-cycle/
 * 难度：简单
 * 标签：链表、哈希表、双指针
 * 
 * ==================== 题目描述 ====================
 * 给你一个链表的头节点 head ，判断链表中是否有环。
 * 
 * 如果链表中有某个节点，可以通过连续跟踪 next 指针再次到达，则链表中存在环。
 * 为了表示给定链表中的环，评测系统内部使用整数 pos 来表示链表尾连接到链表中的位置
 * （索引从 0 开始）。注意：pos 不作为参数进行传递。仅仅是为了标识链表的实际情况。
 * 
 * 如果链表中存在环，则返回 true 。否则，返回 false 。
 * 
 * 示例 1：
 * 输入：head = [3,2,0,-4], pos = 1
 * 输出：true
 * 解释：链表中有一个环，其尾部连接到第二个节点。
 * 
 * 示例 2：
 * 输入：head = [1,2], pos = 0
 * 输出：true
 * 解释：链表中有一个环，其尾部连接到第一个节点。
 * 
 * 示例 3：
 * 输入：head = [1], pos = -1
 * 输出：false
 * 解释：链表中没有环。
 * 
 * 提示：
 * - 链表中节点的数目范围是 [0, 10^4]
 * - -10^5 <= Node.val <= 10^5
 * - pos 为 -1 或者链表中的一个有效索引
 * 
 * ==================== 解题思路 ====================
 * 
 * 【快慢指针（Floyd 判圈算法）】
 * 
 * 核心思想：使用两个速度不同的指针遍历链表
 * - 慢指针每次走一步
 * - 快指针每次走两步
 * - 如果有环，快慢指针一定会相遇
 * - 如果无环，快指针会先到达链表末尾
 * 
 * 形象比喻：
 * 就像操场跑步，快的人和慢的人在环形跑道上一定会相遇
 * 
 * 算法步骤：
 * 1. 初始化 slow = head, fast = head
 * 2. 快指针每次走两步，慢指针每次走一步
 * 3. 如果快指针能到达 null，说明无环
 * 4. 如果 slow == fast，说明有环
 * 
 * 时间复杂度：O(n)
 * - 无环：快指针走到末尾，O(n/2)
 * - 有环：最坏情况下慢指针走一圈，O(n)
 * 
 * 空间复杂度：O(1)
 * - 只使用了两个指针变量
 * 
 * @Author Dxboy266
 * @Date 2025-10-21
 */
public class HasCycle {
    
    /**
     * 快慢指针法（Floyd 判圈算法）
     * 
     * 核心思想：
     * - 慢指针每次走一步，快指针每次走两步
     * - 如果有环，两个指针一定会相遇
     * - 如果无环，快指针会先到达链表末尾
     * 
     * 为什么一定会相遇？
     * - 假设环的长度为 L
     * - 当慢指针进入环时，快指针已经在环内某个位置
     * - 每次迭代，快慢指针之间的距离减少 1
     * - 所以最多 L 次迭代后，两指针会相遇
     * 
     * 时间复杂度：O(n)
     * 空间复杂度：O(1)
     * 
     * @param head 链表头节点
     * @return 如果有环返回 true，否则返回 false
     */
    public boolean hasCycle(ListNode head) {
        // 1. 初始化快慢指针，都从头节点开始
        ListNode slow = head;
        ListNode fast = head;
        
        // 2. 快指针每次走两步，慢指针每次走一步
        // 关键：fast.next != null 确保 fast.next.next 不会空指针
        while (fast != null && fast.next != null) {
            slow = slow.next;        // 慢指针走一步
            fast = fast.next.next;   // 快指针走两步
            
            // 3. 如果快慢指针相遇，说明有环
            if (slow == fast) {
                return true;
            }
        }
        
        // 4. 快指针到达末尾，说明无环
        return false;
    }
}


